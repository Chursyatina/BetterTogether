// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Models/Base.dart';
import 'Models/Habit.dart';
import 'Models/Task.dart';
import 'Models/User.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2950475164016416182),
      name: 'User',
      lastPropertyId: const IdUid(3, 809669189957950587),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3206693035010455059),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3864404062067891333),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tasks', srcEntity: 'Task', srcField: 'user'),
        ModelBacklink(name: 'habits', srcEntity: 'Habit', srcField: 'user')
      ]),
  ModelEntity(
      id: const IdUid(2, 7116827888848056939),
      name: 'Task',
      lastPropertyId: const IdUid(10, 7627628902150890283),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6488089925054314558),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 81322592733296491),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 83997537409543363),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 26288662105214445),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1110832367842513702),
            name: 'subtasks',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4499765543780006275),
            name: 'isDone',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 406074836850048277),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 6236409523386629376),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(8, 615006387648795086),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2968398809047089199),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7627628902150890283),
            name: 'endTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1856663112864766613),
      name: 'Habit',
      lastPropertyId: const IdUid(18, 176401775258317917),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3904479014898455749),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1787769627028000404),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4139723815983659937),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8052149897784057641),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5338340167202547855),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(6, 4119111323123810179),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1089598077661357267),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4682484646891987842),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3629020498387677615),
            name: 'currentScore',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4793201942120620476),
            name: 'monday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8713208437212602940),
            name: 'tuesday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7651390939439736388),
            name: 'wednesday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6187454398704070539),
            name: 'thursday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8143677314245052727),
            name: 'friday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5951244475804328221),
            name: 'saturday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4749837641472053336),
            name: 'sunday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2974129506608984546),
            name: 'daysPerWeek',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 176401775258317917),
            name: 'isDone',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 948073570447017226),
      name: 'Base',
      lastPropertyId: const IdUid(6, 3283431122098486273),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1810072202989056898),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1906124284603879380),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7744107834829874575),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 204846681986499429),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3542056124046396825),
            name: 'endTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3283431122098486273),
            name: 'isDone',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 948073570447017226),
      lastIndexId: const IdUid(2, 6236409523386629376),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [809669189957950587, 7364234349509507783],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<Task>.toOneBacklink(
                      7, object.id, (Task srcObject) => srcObject.user):
                  object.tasks,
              RelInfo<Habit>.toOneBacklink(
                      5, object.id, (Habit srcObject) => srcObject.user):
                  object.habits
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6);
          InternalToManyAccess.setRelInfo(
              object.tasks,
              store,
              RelInfo<Task>.toOneBacklink(
                  7, object.id, (Task srcObject) => srcObject.user),
              store.box<User>());
          InternalToManyAccess.setRelInfo(
              object.habits,
              store,
              RelInfo<Habit>.toOneBacklink(
                  5, object.id, (Habit srcObject) => srcObject.user),
              store.box<User>());
          return object;
        }),
    Task: EntityDefinition<Task>(
        model: _entities[1],
        toOneRelations: (Task object) => [object.user],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final subtasksOffset = object.subtasks == null
              ? null
              : fbb.writeList(object.subtasks!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(4, subtasksOffset);
          fbb.addBool(5, object.isDone);
          fbb.addInt64(6, object.user.targetId);
          fbb.addInt64(7, object.endDate?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.startTime?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.endTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final endDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final startTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = Task()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..date = dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue)
            ..subtasks = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..isDone =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14)
            ..endDate = endDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endDateValue)
            ..startTime = startTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(startTimeValue)
            ..endTime = endTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.user.attach(store);
          return object;
        }),
    Habit: EntityDefinition<Habit>(
        model: _entities[2],
        toOneRelations: (Habit object) => [object.user],
        toManyRelations: (Habit object) => {},
        getId: (Habit object) => object.id,
        setId: (Habit object, int id) {
          object.id = id;
        },
        objectToFB: (Habit object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(4, object.user.targetId);
          fbb.addInt64(5, object.dateOfCreation?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.startTime?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.endTime?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.currentScore);
          fbb.addBool(9, object.monday);
          fbb.addBool(10, object.tuesday);
          fbb.addBool(11, object.wednesday);
          fbb.addBool(12, object.thursday);
          fbb.addBool(13, object.friday);
          fbb.addBool(14, object.saturday);
          fbb.addBool(15, object.sunday);
          fbb.addBool(16, object.daysPerWeek);
          fbb.addBool(17, object.isDone);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfCreationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final startTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = Habit()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..dateOfCreation = dateOfCreationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfCreationValue)
            ..startTime = startTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(startTimeValue)
            ..endTime = endTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endTimeValue)
            ..currentScore =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20)
            ..monday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22)
            ..tuesday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24)
            ..wednesday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26)
            ..thursday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28)
            ..friday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30)
            ..saturday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32)
            ..sunday =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34)
            ..daysPerWeek =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36)
            ..isDone =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.user.attach(store);
          return object;
        }),
    Base: EntityDefinition<Base>(
        model: _entities[3],
        toOneRelations: (Base object) => [],
        toManyRelations: (Base object) => {},
        getId: (Base object) => object.id,
        setId: (Base object, int id) {
          object.id = id;
        },
        objectToFB: (Base object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.startTime?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime?.millisecondsSinceEpoch);
          fbb.addBool(5, object.isDone);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Base()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..startTime = startTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(startTimeValue)
            ..endTime = endTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(endTimeValue)
            ..isDone =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[1]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// see [Task.name]
  static final name = QueryStringProperty<Task>(_entities[1].properties[1]);

  /// see [Task.description]
  static final description =
      QueryStringProperty<Task>(_entities[1].properties[2]);

  /// see [Task.date]
  static final date = QueryIntegerProperty<Task>(_entities[1].properties[3]);

  /// see [Task.subtasks]
  static final subtasks =
      QueryStringVectorProperty<Task>(_entities[1].properties[4]);

  /// see [Task.isDone]
  static final isDone = QueryBooleanProperty<Task>(_entities[1].properties[5]);

  /// see [Task.user]
  static final user =
      QueryRelationToOne<Task, User>(_entities[1].properties[6]);

  /// see [Task.endDate]
  static final endDate = QueryIntegerProperty<Task>(_entities[1].properties[7]);

  /// see [Task.startTime]
  static final startTime =
      QueryIntegerProperty<Task>(_entities[1].properties[8]);

  /// see [Task.endTime]
  static final endTime = QueryIntegerProperty<Task>(_entities[1].properties[9]);
}

/// [Habit] entity fields to define ObjectBox queries.
class Habit_ {
  /// see [Habit.id]
  static final id = QueryIntegerProperty<Habit>(_entities[2].properties[0]);

  /// see [Habit.name]
  static final name = QueryStringProperty<Habit>(_entities[2].properties[1]);

  /// see [Habit.description]
  static final description =
      QueryStringProperty<Habit>(_entities[2].properties[2]);

  /// see [Habit.user]
  static final user =
      QueryRelationToOne<Habit, User>(_entities[2].properties[3]);

  /// see [Habit.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Habit>(_entities[2].properties[4]);

  /// see [Habit.startTime]
  static final startTime =
      QueryIntegerProperty<Habit>(_entities[2].properties[5]);

  /// see [Habit.endTime]
  static final endTime =
      QueryIntegerProperty<Habit>(_entities[2].properties[6]);

  /// see [Habit.currentScore]
  static final currentScore =
      QueryIntegerProperty<Habit>(_entities[2].properties[7]);

  /// see [Habit.monday]
  static final monday = QueryBooleanProperty<Habit>(_entities[2].properties[8]);

  /// see [Habit.tuesday]
  static final tuesday =
      QueryBooleanProperty<Habit>(_entities[2].properties[9]);

  /// see [Habit.wednesday]
  static final wednesday =
      QueryBooleanProperty<Habit>(_entities[2].properties[10]);

  /// see [Habit.thursday]
  static final thursday =
      QueryBooleanProperty<Habit>(_entities[2].properties[11]);

  /// see [Habit.friday]
  static final friday =
      QueryBooleanProperty<Habit>(_entities[2].properties[12]);

  /// see [Habit.saturday]
  static final saturday =
      QueryBooleanProperty<Habit>(_entities[2].properties[13]);

  /// see [Habit.sunday]
  static final sunday =
      QueryBooleanProperty<Habit>(_entities[2].properties[14]);

  /// see [Habit.daysPerWeek]
  static final daysPerWeek =
      QueryBooleanProperty<Habit>(_entities[2].properties[15]);

  /// see [Habit.isDone]
  static final isDone =
      QueryBooleanProperty<Habit>(_entities[2].properties[16]);
}

/// [Base] entity fields to define ObjectBox queries.
class Base_ {
  /// see [Base.id]
  static final id = QueryIntegerProperty<Base>(_entities[3].properties[0]);

  /// see [Base.name]
  static final name = QueryStringProperty<Base>(_entities[3].properties[1]);

  /// see [Base.description]
  static final description =
      QueryStringProperty<Base>(_entities[3].properties[2]);

  /// see [Base.startTime]
  static final startTime =
      QueryIntegerProperty<Base>(_entities[3].properties[3]);

  /// see [Base.endTime]
  static final endTime = QueryIntegerProperty<Base>(_entities[3].properties[4]);

  /// see [Base.isDone]
  static final isDone = QueryBooleanProperty<Base>(_entities[3].properties[5]);
}
